//// [tests/cases/compiler/predicateSemantics.ts] ////

=== predicateSemantics.ts ===
declare let cond: any;
>cond : Symbol(cond, Decl(predicateSemantics.ts, 0, 11))

// OK: One or other operand is possibly nullish
const test1 = (cond ? undefined : 32) ?? "possibly reached";
>test1 : Symbol(test1, Decl(predicateSemantics.ts, 3, 5))
>cond : Symbol(cond, Decl(predicateSemantics.ts, 0, 11))
>undefined : Symbol(undefined)

// Not OK: Both operands nullish
const test2 = (cond ? undefined : null) ?? "always reached";
>test2 : Symbol(test2, Decl(predicateSemantics.ts, 6, 5))
>cond : Symbol(cond, Decl(predicateSemantics.ts, 0, 11))
>undefined : Symbol(undefined)

// Not OK: Both operands non-nullish
const test3 = (cond ? 132 : 17) ?? "unreachable";
>test3 : Symbol(test3, Decl(predicateSemantics.ts, 9, 5))
>cond : Symbol(cond, Decl(predicateSemantics.ts, 0, 11))

// Parens
const test4 = (cond ? (undefined) : (17)) ?? 42;
>test4 : Symbol(test4, Decl(predicateSemantics.ts, 12, 5))
>cond : Symbol(cond, Decl(predicateSemantics.ts, 0, 11))
>undefined : Symbol(undefined)

// Should be OK (special case)
if (!!true) {

}

// Should be OK (special cases)
while (0) { }
while (1) { }
while (true) { }
while (false) { }

const p5 = {} ?? null;
>p5 : Symbol(p5, Decl(predicateSemantics.ts, 25, 5))

const p6 = 0 > 1 ?? null;
>p6 : Symbol(p6, Decl(predicateSemantics.ts, 26, 5))

const p7 = null ?? null;
>p7 : Symbol(p7, Decl(predicateSemantics.ts, 27, 5))

const p8 = (class foo { }) && null;
>p8 : Symbol(p8, Decl(predicateSemantics.ts, 28, 5))
>foo : Symbol(foo, Decl(predicateSemantics.ts, 28, 12))

const p9 = (class foo { }) || null;
>p9 : Symbol(p9, Decl(predicateSemantics.ts, 29, 5))
>foo : Symbol(foo, Decl(predicateSemantics.ts, 29, 12))

// Outer expression tests
while ({} as any) { }
while ({} satisfies unknown) { }
while ((<any>({}))) { }
while ((({}))) { }

// Should be OK
console.log((cond || undefined) && 1 / cond);
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>cond : Symbol(cond, Decl(predicateSemantics.ts, 0, 11))
>undefined : Symbol(undefined)
>cond : Symbol(cond, Decl(predicateSemantics.ts, 0, 11))

function foo(this: Object | undefined) {
>foo : Symbol(foo, Decl(predicateSemantics.ts, 38, 45))
>this : Symbol(this, Decl(predicateSemantics.ts, 40, 13))
>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

    // Should be OK
    return this ?? 0;
>this : Symbol(this, Decl(predicateSemantics.ts, 40, 13))
}

// https://github.com/microsoft/TypeScript/issues/60401
{
  const maybe = null as true | null;
>maybe : Symbol(maybe, Decl(predicateSemantics.ts, 47, 7))

  let i = 0;
>i : Symbol(i, Decl(predicateSemantics.ts, 48, 5))

  const d = (i++, maybe) ?? true; // ok
>d : Symbol(d, Decl(predicateSemantics.ts, 49, 7))
>i : Symbol(i, Decl(predicateSemantics.ts, 48, 5))
>maybe : Symbol(maybe, Decl(predicateSemantics.ts, 47, 7))

  const e = (i++, i++) ?? true; // error
>e : Symbol(e, Decl(predicateSemantics.ts, 50, 7))
>i : Symbol(i, Decl(predicateSemantics.ts, 48, 5))
>i : Symbol(i, Decl(predicateSemantics.ts, 48, 5))

  const f = (maybe, i++) ?? true; // error
>f : Symbol(f, Decl(predicateSemantics.ts, 51, 7))
>maybe : Symbol(maybe, Decl(predicateSemantics.ts, 47, 7))
>i : Symbol(i, Decl(predicateSemantics.ts, 48, 5))
}

// https://github.com/microsoft/TypeScript/issues/60439
class X {
>X : Symbol(X, Decl(predicateSemantics.ts, 52, 1))

  constructor() {
    const p = new.target ?? 32;
>p : Symbol(p, Decl(predicateSemantics.ts, 57, 9))
>new.target : Symbol(X, Decl(predicateSemantics.ts, 52, 1))
>target : Symbol(X, Decl(predicateSemantics.ts, 52, 1))
  }
}

// https://github.com/microsoft/TypeScript/issues/60614
declare function tag<T>(
>tag : Symbol(tag, Decl(predicateSemantics.ts, 59, 1))
>T : Symbol(T, Decl(predicateSemantics.ts, 62, 21))

  strings: TemplateStringsArray,
>strings : Symbol(strings, Decl(predicateSemantics.ts, 62, 24))
>TemplateStringsArray : Symbol(TemplateStringsArray, Decl(lib.es5.d.ts, --, --))

  ...values: number[]
>values : Symbol(values, Decl(predicateSemantics.ts, 63, 32))

): T | null;
>T : Symbol(T, Decl(predicateSemantics.ts, 62, 21))

tag`foo${1}` ?? 32; // ok
>tag : Symbol(tag, Decl(predicateSemantics.ts, 59, 1))

`foo${1}` ?? 32; // error
`foo` ?? 32; // error

