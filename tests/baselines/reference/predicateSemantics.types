//// [tests/cases/compiler/predicateSemantics.ts] ////

=== predicateSemantics.ts ===
declare let cond: any;
>cond : any
>     : ^^^

// OK: One or other operand is possibly nullish
const test1 = (cond ? undefined : 32) ?? "possibly reached";
>test1 : 32 | "possibly reached"
>      : ^^^^^^^^^^^^^^^^^^^^^^^
>(cond ? undefined : 32) ?? "possibly reached" : 32 | "possibly reached"
>                                              : ^^^^^^^^^^^^^^^^^^^^^^^
>(cond ? undefined : 32) : 32
>                        : ^^
>cond ? undefined : 32 : 32
>                      : ^^
>cond : any
>     : ^^^
>undefined : undefined
>          : ^^^^^^^^^
>32 : 32
>   : ^^
>"possibly reached" : "possibly reached"
>                   : ^^^^^^^^^^^^^^^^^^

// Not OK: Both operands nullish
const test2 = (cond ? undefined : null) ?? "always reached";
>test2 : "always reached"
>      : ^^^^^^^^^^^^^^^^
>(cond ? undefined : null) ?? "always reached" : "always reached"
>                                              : ^^^^^^^^^^^^^^^^
>(cond ? undefined : null) : null
>                          : ^^^^
>cond ? undefined : null : null
>                        : ^^^^
>cond : any
>     : ^^^
>undefined : undefined
>          : ^^^^^^^^^
>"always reached" : "always reached"
>                 : ^^^^^^^^^^^^^^^^

// Not OK: Both operands non-nullish
const test3 = (cond ? 132 : 17) ?? "unreachable";
>test3 : 132 | 17 | "unreachable"
>      : ^^^^^^^^^^^^^^^^^^^^^^^^
>(cond ? 132 : 17) ?? "unreachable" : 132 | 17 | "unreachable"
>                                   : ^^^^^^^^^^^^^^^^^^^^^^^^
>(cond ? 132 : 17) : 132 | 17
>                  : ^^^^^^^^
>cond ? 132 : 17 : 132 | 17
>                : ^^^^^^^^
>cond : any
>     : ^^^
>132 : 132
>    : ^^^
>17 : 17
>   : ^^
>"unreachable" : "unreachable"
>              : ^^^^^^^^^^^^^

// Parens
const test4 = (cond ? (undefined) : (17)) ?? 42;
>test4 : 17 | 42
>      : ^^^^^^^
>(cond ? (undefined) : (17)) ?? 42 : 17 | 42
>                                  : ^^^^^^^
>(cond ? (undefined) : (17)) : 17
>                            : ^^
>cond ? (undefined) : (17) : 17
>                          : ^^
>cond : any
>     : ^^^
>(undefined) : undefined
>            : ^^^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^
>(17) : 17
>     : ^^
>17 : 17
>   : ^^
>42 : 42
>   : ^^

// Should be OK (special case)
if (!!true) {
>!!true : boolean
>       : ^^^^^^^
>!true : boolean
>      : ^^^^^^^
>true : true
>     : ^^^^

}

// Should be OK (special cases)
while (0) { }
>0 : 0
>  : ^

while (1) { }
>1 : 1
>  : ^

while (true) { }
>true : true
>     : ^^^^

while (false) { }
>false : false
>      : ^^^^^

const p5 = {} ?? null;
>p5 : {}
>   : ^^
>{} ?? null : {}
>           : ^^
>{} : {}
>   : ^^

const p6 = 0 > 1 ?? null;
>p6 : boolean
>   : ^^^^^^^
>0 > 1 ?? null : boolean
>              : ^^^^^^^
>0 > 1 : boolean
>      : ^^^^^^^
>0 : 0
>  : ^
>1 : 1
>  : ^

const p7 = null ?? null;
>p7 : any
>   : ^^^
>null ?? null : null
>             : ^^^^

const p8 = (class foo { }) && null;
>p8 : any
>   : ^^^
>(class foo { }) && null : null
>                        : ^^^^
>(class foo { }) : typeof foo
>                : ^^^^^^^^^^
>class foo { } : typeof foo
>              : ^^^^^^^^^^
>foo : typeof foo
>    : ^^^^^^^^^^

const p9 = (class foo { }) || null;
>p9 : typeof foo
>   : ^^^^^^^^^^
>(class foo { }) || null : typeof foo
>                        : ^^^^^^^^^^
>(class foo { }) : typeof foo
>                : ^^^^^^^^^^
>class foo { } : typeof foo
>              : ^^^^^^^^^^
>foo : typeof foo
>    : ^^^^^^^^^^

// Outer expression tests
while ({} as any) { }
>{} as any : any
>          : ^^^
>{} : {}
>   : ^^

while ({} satisfies unknown) { }
>{} satisfies unknown : {}
>                     : ^^
>{} : {}
>   : ^^

while ((<any>({}))) { }
>(<any>({})) : any
>            : ^^^
><any>({}) : any
>          : ^^^
>({}) : {}
>     : ^^
>{} : {}
>   : ^^

while ((({}))) { }
>(({})) : {}
>       : ^^
>({}) : {}
>     : ^^
>{} : {}
>   : ^^

// Should be OK
console.log((cond || undefined) && 1 / cond);
>console.log((cond || undefined) && 1 / cond) : void
>                                             : ^^^^
>console.log : (...data: any[]) => void
>            : ^^^^    ^^     ^^^^^    
>console : Console
>        : ^^^^^^^
>log : (...data: any[]) => void
>    : ^^^^    ^^     ^^^^^    
>(cond || undefined) && 1 / cond : number
>                                : ^^^^^^
>(cond || undefined) : any
>                    : ^^^
>cond || undefined : any
>                  : ^^^
>cond : any
>     : ^^^
>undefined : undefined
>          : ^^^^^^^^^
>1 / cond : number
>         : ^^^^^^
>1 : 1
>  : ^
>cond : any
>     : ^^^

function foo(this: Object | undefined) {
>foo : (this: Object | undefined) => Object | 0
>    : ^    ^^                  ^^^^^^^^^^^^^^^
>this : Object
>     : ^^^^^^

    // Should be OK
    return this ?? 0;
>this ?? 0 : 0 | Object
>          : ^^^^^^^^^^
>this : Object
>     : ^^^^^^
>0 : 0
>  : ^
}

// https://github.com/microsoft/TypeScript/issues/60401
{
  const maybe = null as true | null;
>maybe : true
>      : ^^^^
>null as true | null : true
>                    : ^^^^
>true : true
>     : ^^^^

  let i = 0;
>i : number
>  : ^^^^^^
>0 : 0
>  : ^

  const d = (i++, maybe) ?? true; // ok
>d : true
>  : ^^^^
>(i++, maybe) ?? true : true
>                     : ^^^^
>(i++, maybe) : true
>             : ^^^^
>i++, maybe : true
>           : ^^^^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^
>maybe : true
>      : ^^^^
>true : true
>     : ^^^^

  const e = (i++, i++) ?? true; // error
>e : number | true
>  : ^^^^^^^^^^^^^
>(i++, i++) ?? true : number | true
>                   : ^^^^^^^^^^^^^
>(i++, i++) : number
>           : ^^^^^^
>i++, i++ : number
>         : ^^^^^^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^
>true : true
>     : ^^^^

  const f = (maybe, i++) ?? true; // error
>f : number | true
>  : ^^^^^^^^^^^^^
>(maybe, i++) ?? true : number | true
>                     : ^^^^^^^^^^^^^
>(maybe, i++) : number
>             : ^^^^^^
>maybe, i++ : number
>           : ^^^^^^
>maybe : true
>      : ^^^^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^
>true : true
>     : ^^^^
}

// https://github.com/microsoft/TypeScript/issues/60439
class X {
>X : X
>  : ^

  constructor() {
    const p = new.target ?? 32;
>p : 32 | typeof X
>  : ^^^^^^^^^^^^^
>new.target ?? 32 : 32 | typeof X
>                 : ^^^^^^^^^^^^^
>new.target : typeof X
>           : ^^^^^^^^
>target : typeof X
>       : ^^^^^^^^
>32 : 32
>   : ^^
  }
}

// https://github.com/microsoft/TypeScript/issues/60614
declare function tag<T>(
>tag : <T>(strings: TemplateStringsArray, ...values: number[]) => T | null
>    : ^ ^^       ^^                    ^^^^^      ^^        ^^^^^        

  strings: TemplateStringsArray,
>strings : TemplateStringsArray
>        : ^^^^^^^^^^^^^^^^^^^^

  ...values: number[]
>values : number[]
>       : ^^^^^^^^

): T | null;

tag`foo${1}` ?? 32; // ok
>tag`foo${1}` ?? 32 : unknown
>                   : ^^^^^^^
>tag`foo${1}` : unknown
>             : ^^^^^^^
>tag : <T>(strings: TemplateStringsArray, ...values: number[]) => T | null
>    : ^ ^^       ^^                    ^^^^^      ^^        ^^^^^        
>`foo${1}` : string
>          : ^^^^^^
>1 : 1
>  : ^
>32 : 32
>   : ^^

`foo${1}` ?? 32; // error
>`foo${1}` ?? 32 : 32 | "foo1"
>                : ^^^^^^^^^^^
>`foo${1}` : "foo1"
>          : ^^^^^^
>1 : 1
>  : ^
>32 : 32
>   : ^^

`foo` ?? 32; // error
>`foo` ?? 32 : 32 | "foo"
>            : ^^^^^^^^^^
>`foo` : "foo"
>      : ^^^^^
>32 : 32
>   : ^^

